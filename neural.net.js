const { create, all } = require('mathjs');
const math = create(all);

const W1 = [
    [-0.219021686207664,-0.22459702302869,0.77721828713613,0.207494109418763,0.00990340439094434,-0.309879864041825,-0.0985315390481452,0.149314340970846,-0.248657208155895,-0.286964484661347,-0.0763519585981389,0.177600763251115,-0.344983344327077,-0.801342610611361,-0.438524710027654,-0.215670629160222,0.554335280591234],
    [-0.441895297131362,0.332161310249366,-0.54308271403283,-0.259034954772946,0.0468888870454522,0.160626490186456,0.35169632110432,-0.360104546428562,-0.300918101506792,-0.260690687673072,0.754308486451657,-0.0370788633699017,-0.37296096900921,0.171606897051837,-0.7549923703314,-0.288009640097359,0.638332850251734],
    [0.729625806664545,-0.0529469377081056,-0.279284991133696,0.197414895111373,0.80374176913632,-0.302046087382785,0.20809578712213,0.00317969482181208,-0.320046214074941,-0.808241398134813,-0.759646546182448,-1.07164347033936,-0.183722100924953,0.209548295303469,-0.488117407476891,-1.50830698871749,0.0455279379540454],
    [-0.417353677610658,0.437233074702803,-0.480831331721385,-0.0103612150722279,-0.10530039884911,-0.156717707720332,-0.0461219864729811,1.03691944604151,0.843973062159226,1.68874310357357,0.568043741689745,0.360201662638008,-0.562595435157636,0.404274899526792,1.05756139049867,0.372672804406217,1.27334281005615],
    [0.331168831353544,-0.0146856686259404,0.080812413187123,-0.295017393305586,0.239693639132464,0.247129832572822,-0.387723459253631,-1.04662036058587,-1.14951110329856,-0.188333163465987,-0.141297268653025,-0.189460108828734,0.281417937644334,0.393007646041942,0.364162093700702,0.26292400713961,0.0401806424718758],
    [-0.0547233084248032,0.131528496570219,0.793084696670558,-0.400218342016667,-0.885254230795832,-0.633788230958321,-0.425635090860811,-0.915923668221258,-1.15756716311352,-0.19656225322861,0.359684903540102,0.540218769316675,0.225134495432918,-0.291991670814717,-0.760606791734435,0.70459451908314,-0.72593605254725],
    [-0.165584394881464,0.370827018282621,-0.383846173114388,0.20012607991439,0.387147655591764,0.059062163922761,-0.0884132662564138,-0.349216321374084,-0.531967437427415,-0.062318554635264,0.0622547137623444,0.176238642423643,-0.292564156223269,0.0809415677217982,-0.251425562948565,-0.420593875313249,-0.615797327588422],
    [0.829987735788048,0.774706671859451,-0.036589534674145,-0.628782845509682,-0.00654889211186148,-0.124279504597673,-0.613846518618828,0.265988753784,0.337396928283325,1.0127990348425,-0.143498613569666,-0.0590292038343482,0.0284697400599821,-0.383945762729853,0.0330405840007308,1.0394622486668,0.0513478740608061],
    [0.19131522772609,-0.282044606290407,0.23393125361798,1.21255214520531,1.36018367518042,0.0147755243800456,-0.132083525411896,0.902766223148209,0.377595844886153,-0.114415097068685,1.081993036996,0.50438749925954,-0.206444779828697,-0.19248852842366,-0.095974864147974,-1.1537628769505,-0.460113129916102],
    [-0.412635144711891,0.271119957932703,0.442124552791423,0.0592264135089089,-0.556777402834641,-0.300793618104201,-0.108351535399195,-0.0253407144445407,0.155900601106842,-0.00181812421182598,0.478061102316444,-0.253213023611792,-0.020140108770561,-0.56266046188349,-0.321075185504241,0.916306237713754,0.104174869119891]
]
const b1 = [1.43635484424753,0.675377199690867,-0.253686701403902,1.39770957801163,-0.574087352874757,-0.64915289798038,1.0193255109001,0.521922282036678,-0.805621919112793,-2.15037729829675];

const W2 = [
    [0.511576930759193,-0.280013630163871,-0.0613792629372338,1.04326021225441,0.814032877883892,0.455361825098555,0.536737949026477,-0.176830125545386,-0.591659703944115,0.586927458819728],
    [0.331363157596783,0.151972017181779,0.946713336534708,-1.03176054307133,-0.454699779565325,-1.03281848635107,0.209030340527964,0.690330295173414,0.740906855514766,0.0946929714909441],
    [1.01973381740017,1.23102552687586,0.00335200218320925,1.82227199957907,0.0947179075621671,0.0669877681777974,-0.000323878230756059,0.692289884144677,0.107235790554807,0.0286086433086296],
    [0.764602253200003,-0.0601348495309955,-0.166311480247317,1.31426897182399,-0.831049606930604,0.167918928201789,-0.351404096283404,0.628942103040851,-0.705467016524751,-0.573662438761806],
    [0.351649629180438,0.0182520081222556,-0.847026667198206,-1.08499543373106,-1.10000148459484,0.682301023474259,0.037780573128321,0.508231481655889,-0.0572621548224343,0.370595083187147]
];

const b2 = [
    -1.7114354225874,
    -1.05001047682865,
    0.323358420492456,
    1.03673096728879,
    1.64963468026464
];

const W3 = [
    0.018146718931642,
    0.788044383437494,
    -0.445607495215634,
    0.558376126346219,
    -0.626328931208515
];

const b3 = 0.299654600657563;

const inputGain = [
    0.019047619047619, 0.0168067226890756, 0.0163934426229508,
    0.0163934426229508, 0.0153846153846154, 0.0108108108108108,
    0.00909090909090909, 0.00645161290322581, 0.0044543429844098,
    0.00396825396825397, 0.00284900284900285, 0.00221975582685905,
    0.0013745704467354, 0.000680966973101805, 0.333333333333333,
    0.142857142857143, 0.553230770758719
];

const outputGain = 0.222222222222222;

function tansig(x) {
    // Implementation of the funtion tansig
    const expX = math.map(x, (val) => math.exp(val));  // apply exp to each element
    const expNegX = math.map(x, (val) => math.exp(-val));  // apply exp to each element
    return math.dotDivide(math.subtract(expX, expNegX), math.add(expX, expNegX));  // (e^x - e^-x) / (e^x + e^-x)
} 

function convertRawToInput(input) {
    // order the input vector
    const vector = input.slice().sort((a, b) => a - b); // copy + order array

    // calculate statistics
    const countBetween200And400 = vector.filter(x => x > 200 && x < 400).length;
    const countLessThan20 = vector.filter(x => x < 20).length;
    const stdDev = math.std(vector); // standard deviation
    const mean = math.mean(vector); // avg

    // calculate normalized value
    const normalizedStdDev = stdDev / (1 + mean);

    // create output vector
    const output = vector.concat([countBetween200And400, countLessThan20, normalizedStdDev]);

    return output;
}


function neural_net(rawInput) {
    return new Promise((resolve, reject) => {
        try{
            const input = convertRawToInput(rawInput);
            // input normalization
            const s1 = math.dotMultiply(inputGain, input); // Multiplication element by element
            const adjustedInput = math.subtract(s1, 1); // s1 - 1
            // neural net calc
            const s2 = tansig(math.add(math.multiply(W1, adjustedInput), b1));
            const s3 = tansig(math.add(math.multiply(W2, s2), b2));
            const s4 = math.add(math.multiply(W3, s3), b3);
            // output normalization
            const output = math.dotDivide(math.add(s4, 1), outputGain); // (s4 + 1) / outputGain
            resolve(output);
        }catch(err){
            reject(err);
        }
    });
}

function compute_complete(incrementVec, numUnions){
    return new Promise(async (resolve, reject) => {
        try{
            //Input array is forced valid at this point

            //Step 1: Convert cut increments to 7 day-increments by summing pairs
            const dayIncrements = [];
            for (let i = 0; i < 14; i += 2) {
                dayIncrements.push(incrementVec[i] + incrementVec[i + 1]);
            }

            //% Step 2: Sort increments from smallest to largest
            const sortedDayIncrements = dayIncrements.sort((a, b) => a - b);

            //Step 3: Compute total weekly increment
            const totalWeeklyIncrement = dayIncrements.reduce((sum, value) => sum + value, 0);

            //Step 4 : Compute Neutal Net Prediction
            let prediction = await neural_net(incrementVec);
            let planBUsed = false;

            //Step 5: Check if PLAN B conditions are met
            const condition1 = numUnions > 0;
            const condition2 = totalWeeklyIncrement > 1000;
            const condition3 = sortedDayIncrements.slice(0, 3).reduce((sum, val) => sum + val, 0) > 600;
            const condition4 = sortedDayIncrements.slice(0, 3).every(val => val < 300);
            const condition5 = sortedDayIncrements[0] > 100;
            const condition6 = prediction < 4;

            if (condition1 && condition2 && condition3 && condition4 && condition5 && condition6){
                //Use plan B
                const planB_average = sortedDayIncrements.slice(2, 5).reduce((sum, val) => sum + val, 0)/3;
                const weekly_estimate = planB_average * 7;
                prediction = Math.min(10, (weekly_estimate / 2500) * 10);
                planBUsed = true;
            }
            resolve({prediction, planBUsed});
        }catch(err){
            reject(err);
        }
    });
}


module.exports = {
    compute_complete
}